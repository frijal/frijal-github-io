<!doctype html>
<html lang="id">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <title>Multimedia & Editing</title>
    <meta
      name="description"
      content="Kumpulan lengkap artikel, tutorial, dan catatan tentang topik Multimedia & Editing."
    />
    <link rel="canonical" href="https://frijal.pages.dev/artikel/-/multimedia-and-editing.html" />
    <link
      rel="icon"
      href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>📽</text></svg>"
    <meta property="og:title" content="Multimedia & Editing" />
      property="og:description"
      property="og:image"
      content="https://frijal.pages.dev/thumbnail.jpg"
    <meta property="og:image:alt" content="Multimedia & Editing" />
    <meta property="og:url" content="https://frijal.pages.dev/artikel/-/multimedia-and-editing.html" />
    <meta property="og:type" content="website" />
      property="og:site_name"
      content="Jaga Data Pribadi Supaya Tetap Aman"
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="Multimedia & Editing" />
      name="twitter:description"
      name="twitter:image"
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
      href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap"
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
    <link rel="stylesheet" href="/ext/marquee-url.css" />
    <style>
      :root {
        --bg-color: #121212;
        --surface-color: #1e1e1e;
        --primary-text-color: #e0e0e0;
        --secondary-text-color: #b3b3b3;
        --accent-color: #3da9fc; /* Aksen Biru */
        --border-color: #2c2c2c;
        --shadow-color: rgba(61, 169, 252, 0.1);
      }
      @media (prefers-color-scheme: light) {
        :root {
          --bg-color: #f4f4f9;
          --surface-color: #ffffff;
          --primary-text-color: #212121;
          --secondary-text-color: #666666;
          --accent-color: #007bff;
          --border-color: #e0e0e0;
          --shadow-color: rgba(0, 123, 255, 0.15);
        }
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
      body {
        font-family: 'Poppins', sans-serif;
        background-color: var(--bg-color);
        color: var(--primary-text-color);
        line-height: 1.7;
        transition:
          background-color 0.3s,
          color 0.3s;
      .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1.5rem;
      h1 {
        text-align: center;
        color: var(--accent-color);
        margin-bottom: 2.5rem;
        font-size: 2.5rem;
      #article-grid {
        display: grid;
        gap: 1.5rem;
        grid-template-columns: 1fr;
      @media (min-width: 600px) {
        #article-grid {
          grid-template-columns: repeat(2, 1fr);
      @media (min-width: 1024px) {
          grid-template-columns: repeat(4, 1fr);
      .article-card {
        background-color: var(--surface-color);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        overflow: hidden;
          transform 0.3s ease,
          box-shadow 0.3s ease;
        text-decoration: none;
      .article-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 25px var(--shadow-color);
      .card-thumbnail {
        width: 100%;
        aspect-ratio: 16 / 9;
        background-color: #333;
      .card-thumbnail img {
        height: 100%;
        object-fit: cover;
      .card-content {
        padding: 1.5rem;
        flex-grow: 1;
      .card-content h2 {
        margin-bottom: 0.5rem;
        font-size: 1.25rem;
      .card-content p {
        color: var(--secondary-text-color);
        font-size: 0.9rem;
        margin-bottom: 1rem;
      .card-meta {
        margin-top: auto;
        font-size: 0.8rem;
      #loading,
      .message {
        margin-top: 3rem;
        font-style: italic;
    </style>
  </head>
  <body>
    <div class="container">
      <h1 id="page-title">Memuat Artikel...</h1>
      <div id="loading"></div>
      <div id="article-grid"></div>
    </div>
    <section id="related-marquee-section">
      <div id="related-marquee-container"></div>
    </section>
    <div class="search-floating-container">
      <input
        type="text"
        id="floatingSearchInput"
        placeholder="cari artikel..."
        autocomplete="off"
      />
      <span id="floatingSearchClear" class="clear-button">&times;</span>
      <div id="floatingSearchResults" class="floating-results-container"></div>
    <script src="/ext/marquee-url.js"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const TARGET_CATEGORY = '📽️ Multimedia & Editing';
        const DATA_URL = '../../artikel.json';
        const articleGrid = document.getElementById('article-grid');
        const loadingIndicator = document.getElementById('loading');
        const pageTitle = document.getElementById('page-title');
        const fetchAndDisplayCategory = async () => {
          const titleText = TARGET_CATEGORY.replace(/^[^\w\s]*/, '').trim();
          pageTitle.textContent = titleText;
          try {
            const response = await fetch(
              `${DATA_URL}?v=${new Date().getTime()}`
            );
            if (!response.ok) throw new Error(`Status ${response.status}`);
            const allData = await response.json();
            const articles = allData[TARGET_CATEGORY];
            if (!articles || articles.length === 0) {
              articleGrid.innerHTML = `<p class="message">Tidak ada artikel ditemukan untuk kategori "${TARGET_CATEGORY}".</p>`;
              return;
            }
            let articlesHTML = '';
            articles.sort((a, b) => new Date(b[3]) - new Date(a[3]));
            articles.forEach((article) => {
              const [title, url, image, pubDate, description] = article;
              const formattedDate = new Intl.DateTimeFormat('id-ID', {
                dateStyle: 'long',
              }).format(new Date(pubDate));
              articlesHTML += `
                            <a href="../${url}" class="article-card">
                                <div class="card-thumbnail">
                                    <img src="${image}" alt="${title}" loading="lazy">
                                </div>
                                <div class="card-content">
                                    <h2>${title}</h2>
                                    <p>${(description || '...').substring(0, 100)}...</p>
                                    <span class="card-meta">${formattedDate}</span>
                            </a>
                        `;
            });
            articleGrid.innerHTML = articlesHTML;
          } catch (error) {
            console.error('Terjadi kesalahan:', error);
            articleGrid.innerHTML = `<p class="message" style="color: #ff6b6b;">Oops! Gagal memuat data artikel.</p>`;
          } finally {
            loadingIndicator.style.display = 'none';
          }
        };
        fetchAndDisplayCategory();
      });
    </script>
  </body>
</html>
