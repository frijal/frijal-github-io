# .github/workflows/screenshot-semua-html.yml

name: Screenshot Semua File HTML

on:
  # Memungkinkan workflow untuk dijalankan secara manual dari tab Actions
  workflow_dispatch:
    inputs:
      html_glob:
        description: 'Pola file HTML untuk di-screenshot'
        required: true
        default: '**/*.html' # Default akan mencari semua file .html di semua folder

jobs:
  screenshot_proses:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Kode Repositori
        # Diperlukan untuk mengakses file .html dan melakukan commit/push
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Instal HTTP Server Sederhana
        # Kita perlu menjalankan server lokal agar 'webpage-screenshot' dapat mengakses file .html
        run: |
          npm install -g http-server
          # Jalankan server di background pada port 8080
          nohup http-server . -p 8080 &

      - name: Temukan dan Proses Semua File HTML
        run: |
          # Dapatkan pola file dari input (defaultnya adalah **/*.html)
          HTML_GLOB="${{ github.event.inputs.html_glob }}"
          
          # Buat folder target jika belum ada
          mkdir -p artikel
          
          # Cari semua file yang cocok dengan pola
          find . -name "*.html" | while read -r HTML_FILE; do
              # Abaikan file di folder .github dan node_modules
              if [[ "$HTML_FILE" == *".github"* ]] || [[ "$HTML_FILE" == *"node_modules"* ]]; then
                  continue
              fi
              
              # 1. Tentukan Nama File Akhir
              # Hapus "./" di awal dan hapus ekstensi .html
              BASE_NAME=$(echo "$HTML_FILE" | sed -e 's|^./||' -e 's|.html$||')
              # Ganti karakter yang tidak aman dengan underscore
              FILE_NAME=$(echo "$BASE_NAME" | sed 's|[^a-zA-Z0-9_-]|_|g')
              FINAL_PATH="artikel/${FILE_NAME}.jpg"
              
              echo "--- Memproses $HTML_FILE -> $FINAL_PATH ---"
              
              # 2. Periksa Keberadaan File Screenshot
              if [ -f "$FINAL_PATH" ]; then
                  echo "Screenshot sudah ada. Dilewati."
              else
                  # 3. Ambil Screenshot menggunakan URL lokal
                  LOCAL_URL="http://localhost:8080/$(echo "$HTML_FILE" | sed 's|^./||')"
                  
                  # Eksekusi action screenshot menggunakan Docker karena itu cara termudah untuk menjalankannya dalam loop shell
                  docker run --rm -v "${PWD}:/workspace" --network host kitta/webpage-screenshot:latest \
                    --url "$LOCAL_URL" \
                    --output "temp_screenshot.png" \
                    --mode "page" \
                    --type "jpeg" \
                    --quality 90 \
                    --wait-for-selector "body" 

                  # 4. Pindahkan dan Ganti Nama File
                  mv temp_screenshot.jpg "$FINAL_PATH"
                  echo "Screenshot baru berhasil dibuat: $FINAL_PATH"
                  
                  # Tandai bahwa ada perubahan yang perlu di-commit
                  CHANGES_MADE=true
              fi
          done
          
          # Simpan status perubahan
          if [ "$CHANGES_MADE" = true ]; then
             echo "changes_made=true" >> $GITHUB_OUTPUT
          else
             echo "changes_made=false" >> $GITHUB_OUTPUT
          fi
        id: process_files

      - name: Commit dan Push Screenshot Baru
        # Hanya berjalan jika ada file baru yang dibuat
        if: ${{ steps.process_files.outputs.changes_made == 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action Bot"
          
          git add artikel/
          git commit -m "feat: Menambahkan screenshot viewport untuk file HTML baru"
          git push
