name: bikin artikel.json & sitemap.xml

on:
  push:
    branches: ["main"]
    paths:
      - 'artikel/*.html'
  workflow_dispatch:
  schedule:
    - cron: '0 21 * * *'

jobs:
  generator:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: 1. Checkout repository code
        uses: actions/checkout@v4
        with:
          # Kita perlu fetch-depth: 0 agar bisa membandingkan dengan commit sebelumnya (HEAD~1)
          fetch-depth: 0

      - name: 2. Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 3. Install project dependencies
        run: npm ci
           
      - name: 4. Generate 'artikel.json' and 'sitemap.xml'
        run: node ext/generator.js

      - name: 5. Debug generated files
        run: |
          ls -lah artikel/
          echo "--- Isi artikel.json (5 baris pertama) ---"
          head -n 5 artikel.json || echo "artikel.json tidak ada"
          echo "--- Isi sitemap.xml (5 baris pertama) ---"
          head -n 5 sitemap.xml || echo "sitemap.xml tidak ada"

      - name: 6. Commit and Push all generated files
        if: github.ref == 'refs/heads/main'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Cek apakah ada perubahan file di dalam repository
          if [[ -z $(git status -s) ]]; then
            echo "✅ Tidak ada perubahan file, tidak perlu commit."
            exit 0
          fi
          
          echo "✅ Perubahan ditemukan. Melakukan commit..."
          
          # Tambahkan SEMUA file yang berubah (termasuk artikel-terbaru.html)
          git add .
          
          git commit -m "🔄 Update file-file yang di-generate (auto)"
          
          echo "🔃 Melakukan sinkronisasi dengan remote repository..."
          git pull --rebase origin main
          
          echo "🚀 Mendorong perubahan ke server..."
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # --- INI ADALAH BLOK SUMMARY YANG SUDAH DIBERSIHKAN DARI DUPLIKASI ---
      - name: 7. Show Published Links & Summary
        if: github.ref == 'refs/heads/main'
        run: |
          # Menampilkan link file yang baru di-publish
          echo "✅ File berhasil dipublish ke GitHub Pages:"
          echo "🔗 artikel.json: https://frijal.github.io/artikel.json"
          echo "🔗 sitemap.xml : https://frijal.github.io/sitemap.xml"
          echo "🔗 artikel-terbaru.html: https://frijal.github.io/artikel/artikel-terbaru.html"
          echo ""

          # Menampilkan daftar file artikel .html yang berubah pada commit terakhir
          echo "📄 Artikel yang berubah di commit ini:"
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep 'artikel/.*\.html$' || true)
          if [ -z "$CHANGED_FILES" ]; then
            echo "⚠️ Tidak ada file artikel .html yang berubah pada commit terakhir."
          else
            for file in $CHANGED_FILES; do
              base=$(basename "$file")
              echo "🔗 https://frijal.github.io/artikel/$base"
            done
          fi
          echo ""

          # Menghitung statistik dari file-file yang ada
          echo "📊 Jumlah total artikel saat ini:"
          COUNT=$(ls artikel/*.html 2>/dev/null | wc -l)
          echo "➡️  $COUNT artikel di folder artikel/"
          echo ""

          # Analisis mendalam menggunakan 'jq' jika artikel.json ada
          echo "📂 Analisis dari artikel.json:"
          if [ -f artikel.json ]; then
            # Menghitung jumlah kategori unik
            CATEGORIES=$(jq 'keys | length' artikel.json)
            echo "➡️  $CATEGORIES kategori unik."
            echo ""

            # Menampilkan daftar kategori dan jumlah artikel per kategori
            echo "📌 Daftar kategori & jumlah artikelnya:"
            jq -r 'to_entries[] | "• \(.key): \(.value | length) artikel"' artikel.json
            echo ""

            # Menampilkan artikel yang dianggap terbaru (artikel terakhir dalam daftar file JSON)
            echo "🆕 Artikel terbaru yang terdeteksi:"
            jq -r '
              to_entries |
              map(.value[]) |
              .[-1] |
              "• \(.[0])"
            ' artikel.json

          else
            echo "⚠️ artikel.json tidak ditemukan untuk dianalisis."
          fi
